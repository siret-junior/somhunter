// *** Config generated by the Core API ***
import config from "../__config_generated__.json";
// *** Config generated by the Core API ***

import * as CS from "../constants";
import { post } from "../apis/coreApi";
import { crNotif, crHideNotif } from "./notificationCreator";
import { crShowDisplay } from "./mainWindowCreator";
import { createSetSearchState } from "./searchCreator";
import { getTextQueryInput } from "../utils/utils";

export function createRescore(settings, destDisplay) {
  return async (dispatch, getState) => {
    const state = getState();

    dispatch(crNotif(settings, CS.GLOB_NOTIF_INFO, "Working..."));

    // Current text queries
    // \todo Do it propperly!
    const query0 = getTextQueryInput(0).value;
    const query1 = getTextQueryInput(1).value;

    // POST data
    const reqData = {
      q0: query0,
      q1: query1,
    };

    const requestSettings = config.api.endpoints.searchRescore;
    // << Core API >>
    await post(dispatch, requestSettings.post.url, reqData);
    // << Core API >>

    // Load the reset state
    //dispatch(createSetSearchState(settings));
    dispatch(crHideNotif(settings));
    dispatch(crShowDisplay(settings, destDisplay, 0, 0));
  };
}

export function createResetSearch(settings, destDisplay) {
  return async (dispatch, _) => {
    dispatch(crNotif(settings, CS.GLOB_NOTIF_INFO, "Working..."));

    const requestSettings = config.api.endpoints.searchReset;
    // << Core API >>
    await post(dispatch, requestSettings.post.url);
    // << Core API >>

    // Load the reset state
    dispatch(createSetSearchState(settings));
    dispatch(crNotif(settings, CS.GLOB_NOTIF_SUCC, "Search reset.", "", 2000));
    dispatch(crShowDisplay(settings, destDisplay, 0, 0));
  };
}
