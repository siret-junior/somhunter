// *** Config generated by the Core API ***
import config from "../__config_generated__.json";
// *** Config generated by the Core API ***

import * as CS from "../constants";
import { get, post } from "../apis/coreApi";
import {
  crErrNotif,
  crInfoNotif,
  crHideNotif,
} from "../actions/notificationCreator";
import { crShowDisplay } from "../actions/mainWindowCreator";
import { takeScreenshotOfElem } from "../utils/utils";

export function createSetUserHistory(
  s,
  history,
  currCtxId = null,
  succ = () => null,
  fail = () => null
) {
  return async (dispatch, getState) => {
    const state = getState();

    // Recostruct the search context
    const search = { ...state.user.search };
    search.screenshotFilepath = "";
    search.id = currCtxId;

    dispatch({
      type: CS.SET_USER_HISTORY,
      payload: { history, search },
    });
  };
}

export function createFetchAndSetUserState(
  s,
  succ = () => null,
  fail = () => null
) {
  return async (dispatch, _) => {
    const url = config.api.endpoints.userContext.get.url;

    // << Core API >>
    const res = await get(dispatch, url);
    // << Core API >>

    // If failed
    if (res === null) {
      fail();
      dispatch(createSetUserState(null));
    } else {
      succ();
      dispatch(createSetUserState(res.data));
    }
  };
}

export function createSetUserState(pl) {
  return {
    type: CS.SET_USER_STATE,
    payload: pl,
  };
}

export function createFetchAndSwitchSearchState(
  s,
  ctxId,
  succ = () => null,
  fail = () => null
) {
  return async (dispatch, getState) => {
    const state = getState();
    dispatch(crInfoNotif(s, "Working..."));

    const srcSearchCtxId = state.user.search.id;
    const url = config.api.endpoints.searchContext.post.url;

    // Take a screenshot
    let screenData = "";
    // Does this screen still lack the screenshot

    if (state.user.search.screenshotFilepath === "") {
      screenData = await takeScreenshotOfElem(
        document.getElementById("mainGrid")
      );
    }

    const reqData = {
      srcSearchCtxId: srcSearchCtxId,
      screenshotData: screenData,
      id: ctxId,
    };

    // << Core API >>
    const res = await post(dispatch, url, reqData);
    // << Core API >>

    // If failed
    if (res === null) {
      fail();
      return;
    }
    const displayType = res.data.search.displayType;
    succ();
    dispatch(createSetUserState(res.data));

    // Switch to the according display
    dispatch(crShowDisplay(s, config.ui.frameGrid.defaultRescoreDisplay));

    dispatch(crHideNotif(s));
  };
}
