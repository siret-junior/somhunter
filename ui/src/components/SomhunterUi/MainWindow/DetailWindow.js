import React from "react";

// *** Config generated by the Core API ***
import config, { strings } from "../../../__config_generated__.json";
// *** Config generated by the Core API ***
import { get, post } from "../../../apis/coreApi";
import {
  createAddLiked,
  createAddBookmarked,
  createRemoveLiked,
} from "../../../actions/userCreator";
import { crSetQueryChanged } from "../../../actions/indicatorCreator";

import { AutoSizer, Grid } from 'react-virtualized';
import { Modal, Button, Container } from "react-bootstrap";

import Frame from "./Frame";
//import onLikeHandler from "../OnLikeHandler";
import { useSettings } from "../../../hooks/useSettings";

const columns = 6;

async function virtualizedOnLikeHandler(s, props, grid, frameId) {
  const dispatch = s.dispatch;
  const url = config.api.endpoints.searchLike.post.url;

  const reqData = {
    frameId: frameId,
  };

  const response = await post(dispatch, url, reqData);

  // Set query changed flag
  dispatch(crSetQueryChanged(s, true));

  // {
  //   id: number;
  //   liked: bool;
  //   sId: number;
  //   vId: number;
  //   src: string;

  // }

  // Flag ALL the frames accrodingly
  const lid = props.frames.findIndex(e => e.id == frameId)
  if (response.data.isLiked) {
    const fs = document.getElementsByClassName("main-window")[0].querySelectorAll(`[data-frame-id="${frameId}"]`);

    fs.forEach((x) => x.classList.add("liked"));

    props.frames[lid].liked = true;
    const s = props.frames[lid].src;
    dispatch(
      createAddLiked(s, {
        id: frameId,
        liked: true,
        sId: null,
        vId: null,
        // Trim the url( .... ) string
        src: s,
      })
    );
  } else {
    const fs = document.getElementsByClassName("main-window")[0].querySelectorAll(`[data-frame-id="${frameId}"]`);

    fs.forEach((x) => x.classList.remove("liked"));

    props.frames[lid].liked = false;

    dispatch(createRemoveLiked(s, frameId));
  }
}

function DetailWindow(props) {
  const settings = useSettings();

  return (
    <Modal
      {...props}
      size="lg"
      aria-labelledby="contained-modal-title-vcenter"
      centered
      className="detail-window off-canvas-window window"
    >
      <Modal.Header closeButton>
        <Modal.Title id="contained-modal-title-vcenter">
          Video detail
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Container fluid className="p-0 frame-grid row no-gutters">
          <AutoSizer>
            {({ height, width }) => (
              <Grid
                ref={props.gridRef}
                cellRenderer={({ columnIndex, key, parent, rowIndex, style }) => {
                  let frame = props.frames[Math.min(rowIndex * columns + columnIndex, props.frames.length - 1)];
                  if (rowIndex * columns + columnIndex < props.frames.length)
                    return (
                      <Frame
                        isPivot={frame.id === props.pivotId}
                        onLikeHandler={(frameId) => virtualizedOnLikeHandler(settings, props, parent, frameId)}
                        key={frame.id + rowIndex * Math.pow(2, 32)}
                        frame={frame}
                        replayGridRef={props.replayGridRef}
                        style={style}
                      />
                    )
                  else
                    return (<div style={style} />)
                }}
                columnCount={columns}
                columnWidth={(width / columns) - 4}
                height={height}
                rowCount={Math.ceil(props.frames.length / columns)}
                rowHeight={170}
                width={width}
                scrollToRow={props.frames.map(e => e.id).includes(props.pivotId) ?
                  Math.floor(props.frames.map(e => e.id).indexOf(props.pivotId) / columns) :
                  0}
              />
            )}
          </AutoSizer>
        </Container>
      </Modal.Body>
      <Modal.Footer>
        <Button onClick={props.onHide}>Close</Button>
      </Modal.Footer>
    </Modal>
  );
}

export default DetailWindow;
