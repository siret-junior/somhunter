import _ from "lodash";
import React, { useState, useRef, useEffect } from "react";

// *** Config generated by the Core API ***
import config, { strings } from "../../../__config_generated__.json";
// *** Config generated by the Core API ***
import { get, post } from "../../../apis/coreApi";
import {
    createAddLiked,
    createAddBookmarked,
    createRemoveLiked,
} from "../../../actions/userCreator";
import { crSetQueryChanged } from "../../../actions/indicatorCreator";

import { AutoSizer, Grid } from 'react-virtualized';
import { Modal, Button, Container } from "react-bootstrap";

import * as CS from "../../../constants";
import Frame from "./Frame";
import { useSettings } from "../../../hooks/useSettings";



async function virtualizedOnLikeHandler(s, props, grid, frameId) {
    const dispatch = s.dispatch;
    const url = config.api.endpoints.searchLike.post.url;

    const reqData = {
        frameId: frameId,
    };

    const response = await post(dispatch, url, reqData);

    // Set query changed flag
    dispatch(crSetQueryChanged(s, true));

    // {
    //   id: number;
    //   liked: bool;
    //   sId: number;
    //   vId: number;
    //   src: string;

    // }

    // Flag ALL the frames accrodingly
    const lid = props.frames.findIndex(e => e.id == frameId)
    if (response.data.isLiked) {
        const fs = document.getElementsByClassName("main-window")[0].querySelectorAll(`[data-frame-id="${frameId}"]`);

        fs.forEach((x) => x.classList.add("liked"));

        props.frames[lid].liked = true;
        const s = props.frames[lid].src;
        dispatch(
            createAddLiked(s, {
                id: frameId,
                liked: true,
                sId: null,
                vId: null,
                // Trim the url( .... ) string
                src: s,
            })
        );
    } else {
        const fs = document.getElementsByClassName("main-window")[0].querySelectorAll(`[data-frame-id="${frameId}"]`);

        fs.forEach((x) => x.classList.remove("liked"));

        props.frames[lid].liked = false;

        dispatch(createRemoveLiked(s, frameId));
    }
}

function FrameGridVirtualized(props) {
    const scrollYRef = useRef(0);
    const settings = useSettings();
    const coreEndpoints = config.api.endpoints;

    const triggerLogs = (s, props, e, prevScrollY) => {
        const dispatch = s.dispatch;
    
        const scrollY = e.scrollTop;
        const delta = prevScrollY.current + scrollY;
    
        prevScrollY.current = scrollY;
    
        let params = {
          scrollArea: props.mainWindow.activeDisplay,
          frameId: props.mainWindow.pivotFrameId,
          delta: delta,
        };
    
        if (typeof props.mainWindow.activeDisplay === "undefined") {
          params.scrollArea = CS.DISP_TYPE_DETAIL;
        }
    
        get(dispatch, coreEndpoints.logBrowsingScroll.get.url, { params });
      };

      let onScrollTriggerLogsThrottled = _.throttle(
        triggerLogs,
        config.core.submitter_config.log_action_timeout
      );

    return (
        <Container fluid className="p-0 frame-grid row no-gutters">
            <AutoSizer>
                {({ height, width }) => {
                    const colWidth = (width / props.columns) - 4;
                    const rowHeight = colWidth * 9 / 16;
                    return (
                        <Grid
                            ref={props.gridRef}
                            cellRenderer={({ columnIndex, key, parent, rowIndex, style }) => {
                                let frame = props.frames[Math.min(rowIndex * props.columns + columnIndex, props.frames.length - 1)];
                                if (rowIndex * props.columns + columnIndex < props.frames.length)
                                    return (
                                        <Frame
                                            isPivot={frame.id === props.pivotId}
                                            onLikeHandler={(frameId) => virtualizedOnLikeHandler(settings, props, parent, frameId)}
                                            key={frame.id + rowIndex * Math.pow(2, 32)}
                                            frame={frame}
                                            replayGridRef={props.replayGridRef}
                                            style={style}
                                        />
                                    )
                                else
                                    return (<div style={style} />)
                            }}
                            columnCount={props.columns}
                            columnWidth={colWidth}
                            height={height}
                            rowCount={Math.ceil(props.frames.length / props.columns)}
                            rowHeight={rowHeight}
                            width={width}
                            scrollToRow={props.frames.map(e => e.id).includes(props.pivotId) ?
                                Math.floor(props.frames.map(e => e.id).indexOf(props.pivotId) / props.columns) :
                                0}
                            onScroll={(e) => {
                                onScrollTriggerLogsThrottled(settings, props, e, scrollYRef);
                                }}
                        />
                    )
                }}
            </AutoSizer>
        </Container>
    )
}

export default FrameGridVirtualized;
