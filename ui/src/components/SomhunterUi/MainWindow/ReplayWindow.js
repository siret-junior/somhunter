import React, { useState, useRef, useEffect } from "react";

// *** Config generated by the Core API ***
import config, { strings } from "../../../__config_generated__.json";
// *** Config generated by the Core API ***
import { get, post } from "../../../apis/coreApi";

import * as CS from "../../../constants";

import { Modal, Button, Container } from "react-bootstrap";
import FrameGridVirtualized from "./FrameGridVirtualized"
import Frame from "./Frame";
import { AutoSizer, Grid } from 'react-virtualized';
import { useSettings } from "../../../hooks/useSettings";

async function virtualizedOnLikeHandler(s, props, grid, frameId) {
  const dispatch = s.dispatch;
  const url = config.api.endpoints.searchLike.post.url;

  const reqData = {
    frameId: frameId,
  };

  const response = await post(dispatch, url, reqData);

  // Set query changed flag
  dispatch(crSetQueryChanged(s, true));

  // {
  //   id: number;
  //   liked: bool;
  //   sId: number;
  //   vId: number;
  //   src: string;

  // }

  // Flag ALL the frames accrodingly
  const lid = props.frames.findIndex(e => e.id == frameId)
  if (response.data.isLiked) {
    const fs = document.getElementsByClassName("main-window")[0].querySelectorAll(`[data-frame-id="${frameId}"]`);

    fs.forEach((x) => x.classList.add("liked"));

    props.frames[lid].liked = true;
    const s = props.frames[lid].src;
    dispatch(
      createAddLiked(s, {
        id: frameId,
        liked: true,
        sId: null,
        vId: null,
        // Trim the url( .... ) string
        src: s,
      })
    );
  } else {
    const fs = document.getElementsByClassName("main-window")[0].querySelectorAll(`[data-frame-id="${frameId}"]`);

    fs.forEach((x) => x.classList.remove("liked"));

    props.frames[lid].liked = false;

    dispatch(createRemoveLiked(s, frameId));
  }
}

function ReplayWindow(props) {
  const scrollYRef = useRef(0);
  const settings = useSettings();
  const coreEndpoints = config.api.endpoints;

  const triggerLogs = (s, props, e, prevScrollY) => {
    const dispatch = s.dispatch;

    const scrollY = e.scrollTop;
    const delta = prevScrollY.current + scrollY;

    prevScrollY.current = scrollY;

    let params = {
      scrollArea: props.mainWindow.activeDisplay,
      frameId: props.mainWindow.pivotFrameId,
      delta: delta,
    };

    if (typeof props.mainWindow.activeDisplay === "undefined") {
      params.scrollArea = CS.DISP_TYPE_DETAIL;
    }

    get(dispatch, coreEndpoints.logBrowsingScroll.get.url, { params });
  };

  let onScrollTriggerLogsThrottled = _.throttle(
    triggerLogs,
    config.core.submitter_config.log_action_timeout
  );

  const overflowStyle = {
    "overflow-y": "hidden",
    "overflow-x": "auto",
  };

  if (props.frames != null)
    return (
      <Modal
        {...props}
        backdrop={false}
        enforceFocus={false}
        keyboard={false}
        autoFocus={false}
        animation={false}
        size="lg"
        aria-labelledby="contained-modal-title-vcenter"
        centered
        className="replay-window off-canvas-window window"
        style={props.styles}
      >
        <Modal.Header closeButton>
          <Modal.Title id="contained-modal-title-vcenter">
            Video replay
        </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Container fluid className="p-0 frame-grid row no-gutters">
            <AutoSizer>
              {({ height }) => {
                const rowHeight = height - 17;
                const colWidth = rowHeight * 16 / 9;
                var pivotColumn = props.frames.map(e => e.id).includes(props.pivotId) ?
                    props.frames.map(e => e.id).indexOf(props.pivotId) + 3 :
                    0
                pivotColumn = Math.min(pivotColumn, props.frames.length - 1)
                
                return (<Grid
                  ref={props.gridRef}
                  cellRenderer={({ columnIndex, key, parent, rowIndex, style }) => {
                    let frame = props.frames[Math.min(columnIndex, props.frames.length - 1)];
                    if (columnIndex < props.frames.length)
                      return (
                        <Frame
                          isPivot={frame.id === props.pivotId}
                          onLikeHandler={(frameId) => virtualizedOnLikeHandler(settings, props, parent, frameId)}
                          key={frame.id + rowIndex * Math.pow(2, 32)}
                          frame={frame}
                          replayGridRef={props.gridRef}
                          style={style}
                        />
                      )
                    else
                      return (<div style={style} />)
                  }}
                  columnCount={props.frames.length}
                  columnWidth={colWidth}
                  height={height}
                  rowCount={1}
                  rowHeight={rowHeight}
                  width={1900}
                  style={overflowStyle}
                  scrollToColumn={pivotColumn}
                  onScroll={(e) => {
                    onScrollTriggerLogsThrottled(settings, props, e, scrollYRef);
                  }}
                />)
              }}
            </AutoSizer>
          </Container>
        </Modal.Body>
      </Modal>
    );
  else
    return (<div />);
}

export default ReplayWindow;
