import html2canvas from "html2canvas";

// ---

// *** Config generated by the Core API ***
import config from "../__config_generated__.json";
// *** Config generated by the Core API ***

export const delay = (ms) => new Promise((res) => setTimeout(res, ms));

/** Checks if a custom response error defined. */
export function isErrDef(e) {
  if (typeof e.response !== "undefined")
    if (typeof e.response.data !== "undefined")
      if (typeof e.response.data.error !== "undefined") return true;

  return false;
}

export function resetMainGridScroll() {
  const el = document.getElementById("mainGrid");
  if (el) el.scrollTop = 0;
}

export function getTextQueryInput(idx) {
  return document.getElementById(`textQuery${idx}`).childNodes[0];
}

function get_raw_img(img) {
  var canvas = document.createElement("canvas");
  var context = canvas.getContext("2d");
  canvas.width = img.width;
  canvas.height = img.height;
  context.drawImage(img, 0, 0);
  var myData = context.getImageData(0, 0, img.width, img.height);
  return Array.from(myData.data);
}

function collectCollageImages(collage_canvas) {
  collage_canvas = $(collage_canvas);
  const images = collage_canvas.find(".collage-image");
  let images_information = [];
  for (var i = 0; i < images.length; i++) {
    const image = images.eq(i);
    images_information.push({
      src: image.children("img").attr("src"),
      top: image.position().top / collage_canvas.height(),
      left: image.position().left / collage_canvas.width(),
      width: image.width() / collage_canvas.width(),
      height: image.height() / collage_canvas.height(),
    });
  }
  return images_information;
}

export function getCollageInputs() {
  const cq0 = document.getElementById("collageQuery0");
  const cq1 = document.getElementById("collageQuery1");

  let first_collage = collectCollageImages(cq0);
  let second_collage = collectCollageImages(cq1);

  let lefts = [];
  let tops = [];
  let heights = [];
  let widths = [];
  let pics = [];
  let pixel_widths = [];
  let pixel_heights = [];
  let first = [first_collage.length];

  let i, p;
  for (i in first_collage) {
    lefts.push(first_collage[i].left);
    tops.push(first_collage[i].top);
    heights.push(first_collage[i].height);
    widths.push(first_collage[i].width);
    var img = new Image();
    img.src = first_collage[i].src;
    pixel_heights.push(img.height);
    pixel_widths.push(img.width);
    pics.push(get_raw_img(img));
  }

  for (i in second_collage) {
    lefts.push(second_collage[i].left);
    tops.push(second_collage[i].top);
    heights.push(second_collage[i].height);
    widths.push(second_collage[i].width);
    var img = new Image();
    img.src = second_collage[i].src;
    pixel_heights.push(img.height);
    pixel_widths.push(img.width);
    pics.push(get_raw_img(img));
  }

  console.log(pics);

  let conc_pics = [];
  for (p in pics) {
    conc_pics = conc_pics.concat(pics[p]);
  }
  // console.log(conc_pics)

  
  let body = {
    pictures: conc_pics,
    left: lefts,
    top: tops,
    width: widths,
    height: heights,
    pixel_width: pixel_widths,
    pixel_height: pixel_heights,
    break: first,
  };

  return body;
}

export function getFiltersInput() {
  const filtersContEl = document.getElementById("queryFilters");

  const weekdaysEl = document.getElementById("queryFiltersWeekdays");

  let weekdays = [];
  weekdaysEl.childNodes.forEach((x) => {
    const v = x.querySelector(".form-check-input");

    if (v) weekdays.push(v.checked);
  });

  const hoursFrom = Number(
    document.getElementById(config.ui.htmlElIds.queryFiltersHourFrom).value
  );
  const hoursTo = Number(
    document.getElementById(config.ui.htmlElIds.queryFiltersHourTo).value
  );

  return {
    weekdays,
    hoursFrom,
    hoursTo,
  };
}

export function hideAllSubQueries() {
  document
    .querySelectorAll(".sub-query-tile")
    .forEach((x) => x.classList.remove("active"));
}

export async function takeScreenshotOfElem(elem, frames) {
  /* ***
   * Get the helper values
   */
  const numX = config.ui.history.screenshotNumX;
  const numY = config.ui.history.screenshotNumY;

  const w = 200;
  const h = w * 0.57;

  const wi = w / numX;
  const hi = h / numY;

  /* ***
   * Draw the frames into the canvas
   */
  const resizedCanvas = document.createElement("canvas");
  const resizedContext = resizedCanvas.getContext("2d");
  resizedCanvas.width = w.toString();
  resizedCanvas.height = h.toString();

  let frame_idx = 0;
  for (let i = 0; i < numY; ++i) {
    for (let j = 0; j < numX; ++j) {
      const dx = wi * j;
      const dy = hi * i;

      if (frame_idx >= frames.length) {
        break;
      }
      const img = new Image(wi, hi);
      img.src = config.ui.media.thumbsPathPrefix + frames[frame_idx].src;

      resizedContext.drawImage(img, dx, dy, wi, hi);
      ++frame_idx;
    }
  }

  const imgData = resizedCanvas.toDataURL("image/jpeg");
  return imgData;
}
